{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/two-ways-to-use-usestate-setter","result":{"data":{"markdownRemark":{"html":"<h2>1. Providing a new value</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Initial setup</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>disabled<span class=\"token punctuation\">,</span> setDisabled<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Later, modifying the state</span>\n<span class=\"token function\">setDisabled</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>disabled<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>2. Providing a function with the previous state as the argument</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Initial setup</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>disabled<span class=\"token punctuation\">,</span> setDisabled<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Later, modifying the state</span>\n<span class=\"token function\">setDisabled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">disabled</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>disabled<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>When to use one over the other.</h2>\n<ul>\n<li>If you're component does not rely on the old state then use the new value as argument.</li>\n<li>If you're code relies on the previous state, then you should always use the function as an argument.\nThe Problem lies in the fact that React state updates are batched,\nmeaning that multiple state changes can occur in a single update.\nIf you're component relies on the old state and you have multiple updates to the enabled/disabled state,\nthe result may not be what you expect.</li>\n</ul>","frontmatter":{"date":"September 03, 2020","path":"/blog/two-ways-to-use-usestate-setter","title":"Two ways to use React useState setter function","tags":["react","react-hooks","javascript","Today I learned"]}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}